import streamlit as st
from get_transcript import fetch_transcript
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_core.documents import Document
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from langchain_community.vectorstores import FAISS
from langchain_core.prompts import ChatPromptTemplate
from dotenv import load_dotenv
import os

load_dotenv()

st.set_page_config(page_title="YouTube Bangla Chatbot", layout="wide")

# Sidebar
with st.sidebar:
    st.image("https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Logo_of_YouTube_%282015-2017%29.svg/2560px-Logo_of_YouTube_%282015-2017%29.svg.png", width=60)
    # st.markdown("## YT Bangla Chatbot")
    st.markdown(
        """
        - ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®
        - ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
        - ‡¶∏‡¶¨ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶™‡¶æ‡¶¨‡ßá‡¶®!
        """
    )
    st.markdown("---")
    st.markdown('Contact me - [Mahdi Islam Pranto](https://www.linkedin.com/in/mahdi-islam-pranto/)', unsafe_allow_html=True)

st.markdown(
    "<h1 style='text-align: center; color: #FF0000;'>üì∫ YT Bangla Chatbot</h1>",
    unsafe_allow_html=True,
)

st.markdown(
    "<p style='text-align: center; color: #555;'>‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®!</p>",
    unsafe_allow_html=True,
)

# User input for YouTube link
yt_url = st.text_input("‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®:", placeholder="https://www.youtube.com/watch?v=...")

# Only process transcript and vector store if yt_url changes
if yt_url:
    if (
        "last_url" not in st.session_state
        or st.session_state.last_url != yt_url
        or "vector_store" not in st.session_state
    ):
        with st.spinner("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."):
            transcript = fetch_transcript(yt_url)
            if not transcript:
                st.error("‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®‡•§")
                st.session_state.transcript_ready = False
            else:
                text_splitter = RecursiveCharacterTextSplitter(
                    chunk_size=1500,
                    chunk_overlap=200,
                    separators=["\n", " ", "."],
                )
                transcript_chunks = text_splitter.split_text(transcript)
                documents = [Document(page_content=chunk, metadata={"source": yt_url}) for chunk in transcript_chunks]
                embeddings = OpenAIEmbeddings(model="text-embedding-3-large")
                vector_store = FAISS.from_documents(documents=documents, embedding=embeddings)
                retriever = vector_store.as_retriever(search_kwargs={"k": 6})
                prompt = ChatPromptTemplate.from_messages(
                    [
                        ("system", "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü, ‡¶Ø‡ßá‡¶ü‡¶ø ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶æ‡¶ì‡•§ ‡¶∏‡¶¨ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶¶‡ßá‡¶¨‡ßá‡•§"),
                        ("user", "‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: {question}"),
                        ("user", "‡¶™‡ßç‡¶∞‡¶æ‡¶∏‡¶ô‡ßç‡¶ó‡¶ø‡¶ï ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü: {context}"),
                        ("assistant", 
                         "‡¶â‡¶™‡¶∞‡ßá‡¶∞ ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶§‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶ì ‡¶∏‡¶π‡¶ú‡¶≠‡¶æ‡¶¨‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶æ‡¶ì‡•§ "
                         "‡¶Ø‡¶¶‡¶ø ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶Æ‡¶ø‡¶≤ ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶æ‡¶∏‡¶ô‡ßç‡¶ó‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ ‡¶ï‡¶∞‡ßã, "
                         "‡¶Ø‡¶æ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶Ü‡¶∞‡¶ì ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶∏‡ßá ‡¶ï‡ßÄ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶Ø‡¶º‡•§")
                    ]
                )
                llm = ChatOpenAI(model="gpt-4o", temperature=0.2)
                st.session_state.vector_store = vector_store
                st.session_state.retriever = retriever
                st.session_state.prompt = prompt
                st.session_state.llm = llm
                st.session_state.last_url = yt_url
                st.session_state.messages = []
                st.session_state.transcript_ready = True
    else:
        # Already processed for this URL
        pass

    if st.session_state.get("transcript_ready", False):
        st.success("‚úÖ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§! ‡¶è‡¶ñ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

        # Chat input area using a form for safe state handling
        with st.form("chat_form", clear_on_submit=True):
            user_input = st.text_input("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:", key="user_input", placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®...")
            submitted = st.form_submit_button("‚úâÔ∏è")

        if submitted and user_input.strip():
            with st.spinner("‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."):
                context_docs = st.session_state.retriever.invoke(user_input)
                final_prompt = st.session_state.prompt.invoke({"question": user_input, "context": context_docs})
                response = st.session_state.llm.invoke(final_prompt)
                st.session_state.messages.append(("user", user_input))
                st.session_state.messages.append(("assistant", response.content))

        # Chat history display
        st.markdown("---")
        st.markdown("### üí¨ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø")
        for role, msg in st.session_state.messages:
            if role == "user":
                st.markdown(
                    f"""
                    <div style='background-color:#1976d2; padding:10px; border-radius:10px; margin-bottom:5px;'>
                    <b>üßë‚Äçüíª ‡¶Ü‡¶™‡¶®‡¶ø:</b> {msg}
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.markdown(
                    f"""
                    <div style='background-color:#fff8e1; color:#333; padding:10px; border-radius:10px; margin-bottom:10px;'>
                    <b>ü§ñ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü:</b> {msg}
                    </div>
                    """, unsafe_allow_html=True)
else:
    st.info("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶® ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")